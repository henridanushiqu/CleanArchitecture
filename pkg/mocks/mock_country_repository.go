// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/repository/repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	entity "myapp/pkg/entity"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCountryRepository is a mock of CountryRepository interface.
type MockCountryRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCountryRepositoryMockRecorder
}

// MockCountryRepositoryMockRecorder is the mock recorder for MockCountryRepository.
type MockCountryRepositoryMockRecorder struct {
	mock *MockCountryRepository
}

// NewMockCountryRepository creates a new mock instance.
func NewMockCountryRepository(ctrl *gomock.Controller) *MockCountryRepository {
	mock := &MockCountryRepository{ctrl: ctrl}
	mock.recorder = &MockCountryRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCountryRepository) EXPECT() *MockCountryRepositoryMockRecorder {
	return m.recorder
}

// EditCountry mocks base method.
func (m *MockCountryRepository) EditCountry(ctx context.Context, country entity.Country) (entity.Country, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditCountry", ctx, country)
	ret0, _ := ret[0].(entity.Country)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EditCountry indicates an expected call of EditCountry.
func (mr *MockCountryRepositoryMockRecorder) EditCountry(ctx, country interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditCountry", reflect.TypeOf((*MockCountryRepository)(nil).EditCountry), ctx, country)
}

// GetCountries mocks base method.
func (m *MockCountryRepository) GetCountries(ctx context.Context, pagination entity.Pagination) ([]entity.Country, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCountries", ctx, pagination)
	ret0, _ := ret[0].([]entity.Country)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCountries indicates an expected call of GetCountries.
func (mr *MockCountryRepositoryMockRecorder) GetCountries(ctx, pagination interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCountries", reflect.TypeOf((*MockCountryRepository)(nil).GetCountries), ctx, pagination)
}

// GetCountryByID mocks base method.
func (m *MockCountryRepository) GetCountryByID(ctx context.Context, id int) (entity.Country, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCountryByID", ctx, id)
	ret0, _ := ret[0].(entity.Country)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCountryByID indicates an expected call of GetCountryByID.
func (mr *MockCountryRepositoryMockRecorder) GetCountryByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCountryByID", reflect.TypeOf((*MockCountryRepository)(nil).GetCountryByID), ctx, id)
}

// PostCountry mocks base method.
func (m *MockCountryRepository) PostCountry(ctx context.Context, country entity.Country) (entity.Country, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostCountry", ctx, country)
	ret0, _ := ret[0].(entity.Country)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostCountry indicates an expected call of PostCountry.
func (mr *MockCountryRepositoryMockRecorder) PostCountry(ctx, country interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostCountry", reflect.TypeOf((*MockCountryRepository)(nil).PostCountry), ctx, country)
}
