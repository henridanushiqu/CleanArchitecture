// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/service/service.go

// Package mock_service is a generated GoMock package.
package mocks

import (
        context "context"
        entity "myapp/pkg/entity"
        reflect "reflect"

        gomock "github.com/golang/mock/gomock"
)

// MockCountryService is a mock of CountryService interface.
type MockCountryService struct {
        ctrl     *gomock.Controller
        recorder *MockCountryServiceMockRecorder
}

// MockCountryServiceMockRecorder is the mock recorder for MockCountryService.
type MockCountryServiceMockRecorder struct {
        mock *MockCountryService
}

// NewMockCountryService creates a new mock instance.
func NewMockCountryService(ctrl *gomock.Controller) *MockCountryService {
        mock := &MockCountryService{ctrl: ctrl}
        mock.recorder = &MockCountryServiceMockRecorder{mock}
        return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCountryService) EXPECT() *MockCountryServiceMockRecorder {
        return m.recorder
}

// EditCountry mocks base method.
func (m *MockCountryService) EditCountry(ctx context.Context, country entity.Country) (entity.Country, error) {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "EditCountry", ctx, country)
        ret0, _ := ret[0].(entity.Country)
        ret1, _ := ret[1].(error)
        return ret0, ret1
}

// EditCountry indicates an expected call of EditCountry.
func (mr *MockCountryServiceMockRecorder) EditCountry(ctx, country interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditCountry", reflect.TypeOf((*MockCountryService)(nil).EditCountry), ctx, country)
}

// GetCountries mocks base method.
func (m *MockCountryService) GetCountries(ctx context.Context, pagination entity.Pagination) ([]entity.Country, error) {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "GetCountries", ctx, pagination)
        ret0, _ := ret[0].([]entity.Country)
        ret1, _ := ret[1].(error)
        return ret0, ret1
}

// GetCountries indicates an expected call of GetCountries.
func (mr *MockCountryServiceMockRecorder) GetCountries(ctx, pagination interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCountries", reflect.TypeOf((*MockCountryService)(nil).GetCountries), ctx, pagination)
}

// GetCountryByID mocks base method.
func (m *MockCountryService) GetCountryByID(ctx context.Context, id int) (entity.Country, error) {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "GetCountryByID", ctx, id)
        ret0, _ := ret[0].(entity.Country)
        ret1, _ := ret[1].(error)
        return ret0, ret1
}

// GetCountryByID indicates an expected call of GetCountryByID.
func (mr *MockCountryServiceMockRecorder) GetCountryByID(ctx, id interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCountryByID", reflect.TypeOf((*MockCountryService)(nil).GetCountryByID), ctx, id)
}

// PostCountry mocks base method.
func (m *MockCountryService) PostCountry(ctx context.Context, country entity.Country) (entity.Country, error) {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "PostCountry", ctx, country)
        ret0, _ := ret[0].(entity.Country)
        ret1, _ := ret[1].(error)
        return ret0, ret1
}

// PostCountry indicates an expected call of PostCountry.
func (mr *MockCountryServiceMockRecorder) PostCountry(ctx, country interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostCountry", reflect.TypeOf((*MockCountryService)(nil).PostCountry), ctx, country)
}